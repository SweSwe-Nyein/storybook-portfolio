generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id              String          @id @default(cuid())
  name            String?
  email           String?   @unique
  password        String?   // Optional if using Google login
  role            String?
  overview        String?
  bio             String?
  experienceYears Int?
  projectsCount   Int?
  emailVerified   DateTime?
  image           String?
  address         String?
  githubUrl       String?
  linkedInUrl     String?
  instagramUrl    String?
  accounts        Account[]
  sessions        Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model SkillCategory {
  id            Int     @id @default(autoincrement())
  name          String  // e.g., "Frontend Development", "UI/UX Design"
  description   String
  icon          String?
  color         String?
  skills Skill  []
}

model Skill {
  id              Int    @id @default(autoincrement())
  name            String
  skillCategoryId Int
  skillCategory   SkillCategory @relation(fields: [skillCategoryId], references: [id])
}

model WorkExperience {
  id          String   @id
  company     String
  position    String
  location    String
  startDate   String
  endDate     String? // Nullable
  description String
  technologies String[] // PostgreSQL or MongoDB supports String[]
  companyUrl  String?   // Optional since not all entries have it
  type        String
} 

model Project {
  id          Int      @id @default(autoincrement())
  tag         String?
  title       String   // e.g., "Storybook Portfolio"
  subtitle    String   // e.g., "A Tale of a Developer"
  description String   // Project overview
  techStack   String[] // ["Next.js", "TypeScript", ...]
  liveUrl     String?
  codeUrl     String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}